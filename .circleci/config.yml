version: 2.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: circle-cicd
          template: basic_fail_1

  #The following THREE commands of AWS CLI and Ansible are based on Ubuntu distribution
  install-aws-cli: 
    description: Install AWS CLI
    steps: 
      - run: 
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-ansible:
    description: Install Ansible
    steps:
      - run: 
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common --yes
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible --yes

  install-nodejs:
    description: Install NodeJS
    steps:
      - run: 
          name: Install NodeJS
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - 
            sudo apt update
            sudo apt install -y nodejs

    
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      Circleci_Workflow_ID:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Circleci_Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Circleci_Workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Circleci_Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      Circleci_Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migrations_<< parameters.Circleci_Workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
      - notify_on_failure

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - notify_on_failure
                
  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
      - notify_on_failure
    
  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [forntend-dependencies]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
      - notify_on_failure
  
  notify_on_success: 
    docker: 
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: circle-cicd
          template: success_tagged_deployment_1
            

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKED_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKED_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      # Here's where you will add some code to rollback on failure   
      - destroy-environment   

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - install-ansible
      - install-aws-cli
      - add_ssh_keys:
          fingerprints: ["d7:30:2b:32:e0:7d:c1:34:3d:b5:53:53:83:59:16:4d"]
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      
      # Here's where you will add some code to rollback on failure    
      - destroy-environment
  

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install-aws-cli
        
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration_output.txt
            cat migration_output.txt
      - run:
          name: Send migration results to KVDB
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migration_output.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migrations_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi

     # Here's where you will add some code to rollback on failure  
      - revert-migrations  
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install-aws-cli
      - install-ansible
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            # Getting the created instance URL

            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure   
      - revert-migrations  
      - destroy-environment
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: base:stable
    steps:
      # Checkout code from git
      - checkout
      - install-aws-cli
      - install-ansible
      - install-nodejs
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d7:30:2b:32:e0:7d:c1:34:3d:b5:53:53:83:59:16:4d"]
      # attach workspace
      - attach_workspace:
          at: ~/
      # Restore Cache
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Build Backend and copy build files
          command: |
            cd backend
            npm i
            npm run build
            tar -czf artifact.tar.gz package* dist/*
            cp artifact.tar.gz ./../.circleci/ansible/roles/deploy/files
          
      - run:
          name: Deploy backend
          command: |
            cd backend
            ./setup_prod_env.sh
            cd .. && cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - revert-migrations 
      - destroy-environment

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

orbs:
  slack: circleci/slack@4.9.3